// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.0
// source: query.sql

package storage

import (
	"context"
	"database/sql"
)

const acceptBid = `-- name: AcceptBid :exec
UPDATE Projects SET price = Bids.price, deadline = Bids.deadline,
                    contractor=Bids.contractor, status = $1 FROM Bids
                WHERE Projects.id = Bids.project AND Bids.id = $2
`

type AcceptBidParams struct {
	Status sql.NullInt16 `db:"status" json:"status"`
	ID     int64         `db:"id" json:"id"`
}

func (q *Queries) AcceptBid(ctx context.Context, arg AcceptBidParams) error {
	_, err := q.db.ExecContext(ctx, acceptBid, arg.Status, arg.ID)
	return err
}

const addUser = `-- name: AddUser :exec
INSERT INTO Users (id, nickname, description, nonce, registered, status,
                   tags, rating, account) VALUES($1, $2, $3, $4, $5, $6,
                                              $7, $8, $9)
`

type AddUserParams struct {
	ID          string          `db:"id" json:"id"`
	Nickname    sql.NullString  `db:"nickname" json:"nickname"`
	Description sql.NullString  `db:"description" json:"description"`
	Nonce       sql.NullInt64   `db:"nonce" json:"nonce"`
	Registered  sql.NullTime    `db:"registered" json:"registered"`
	Status      sql.NullInt16   `db:"status" json:"status"`
	Tags        sql.NullString  `db:"tags" json:"tags"`
	Rating      sql.NullFloat64 `db:"rating" json:"rating"`
	Account     sql.NullInt64   `db:"account" json:"account"`
}

// adds new user
func (q *Queries) AddUser(ctx context.Context, arg AddUserParams) error {
	_, err := q.db.ExecContext(ctx, addUser,
		arg.ID,
		arg.Nickname,
		arg.Description,
		arg.Nonce,
		arg.Registered,
		arg.Status,
		arg.Tags,
		arg.Rating,
		arg.Account,
	)
	return err
}

const createBid = `-- name: CreateBid :one
INSERT INTO Bids (project, contractor, price, deadline, message) VALUES($1, $2,
                  $3, $4, $5) RETURNING id
`

type CreateBidParams struct {
	Project    sql.NullInt64  `db:"project" json:"project"`
	Contractor sql.NullString `db:"contractor" json:"contractor"`
	Price      sql.NullInt64  `db:"price" json:"price"`
	Deadline   sql.NullInt64  `db:"deadline" json:"deadline"`
	Message    sql.NullString `db:"message" json:"message"`
}

func (q *Queries) CreateBid(ctx context.Context, arg CreateBidParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createBid,
		arg.Project,
		arg.Contractor,
		arg.Price,
		arg.Deadline,
		arg.Message,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const createProject = `-- name: CreateProject :one
INSERT INTO Projects (title, description, tags, created, status, owner,
                      deadline, price) VALUES($1, $2, $3, $4, $5, $6, $7,
                      $8) RETURNING id
`

type CreateProjectParams struct {
	Title       sql.NullString `db:"title" json:"title"`
	Description sql.NullString `db:"description" json:"description"`
	Tags        sql.NullString `db:"tags" json:"tags"`
	Created     sql.NullTime   `db:"created" json:"created"`
	Status      sql.NullInt16  `db:"status" json:"status"`
	Owner       sql.NullString `db:"owner" json:"owner"`
	Deadline    sql.NullInt64  `db:"deadline" json:"deadline"`
	Price       sql.NullInt64  `db:"price" json:"price"`
}

func (q *Queries) CreateProject(ctx context.Context, arg CreateProjectParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createProject,
		arg.Title,
		arg.Description,
		arg.Tags,
		arg.Created,
		arg.Status,
		arg.Owner,
		arg.Deadline,
		arg.Price,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const deleteBid = `-- name: DeleteBid :exec
DELETE FROM Bids WHERE id = $1
`

func (q *Queries) DeleteBid(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteBid, id)
	return err
}

const deleteProject = `-- name: DeleteProject :exec
DELETE FROM Projects WHERE id = $1
`

func (q *Queries) DeleteProject(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteProject, id)
	return err
}

const getBid = `-- name: GetBid :one
SELECT id, project, contractor, price, deadline, message FROM Bids WHERE id = $1
`

func (q *Queries) GetBid(ctx context.Context, id int64) (Bid, error) {
	row := q.db.QueryRowContext(ctx, getBid, id)
	var i Bid
	err := row.Scan(
		&i.ID,
		&i.Project,
		&i.Contractor,
		&i.Price,
		&i.Deadline,
		&i.Message,
	)
	return i, err
}

const getProject = `-- name: GetProject :one
SELECT id, title, description, tags, created, status, owner, contractor, started, deadline, price FROM Projects WHERE id = $1
`

// get project info
func (q *Queries) GetProject(ctx context.Context, id int64) (Project, error) {
	row := q.db.QueryRowContext(ctx, getProject, id)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Tags,
		&i.Created,
		&i.Status,
		&i.Owner,
		&i.Contractor,
		&i.Started,
		&i.Deadline,
		&i.Price,
	)
	return i, err
}

const getProjectBids = `-- name: GetProjectBids :many
SELECT id FROM Bids WHERE project = $1
`

func (q *Queries) GetProjectBids(ctx context.Context, project sql.NullInt64) ([]int64, error) {
	rows, err := q.db.QueryContext(ctx, getProjectBids, project)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int64
	for rows.Next() {
		var id int64
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProjectList = `-- name: GetProjectList :many
SELECT id FROM Projects
`

// get all project ids
func (q *Queries) GetProjectList(ctx context.Context) ([]int64, error) {
	rows, err := q.db.QueryContext(ctx, getProjectList)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int64
	for rows.Next() {
		var id int64
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUser = `-- name: GetUser :one
SELECT id, nickname, description, nonce, registered, status, tags, rating, account FROM Users WHERE id = $1
`

// get user info
func (q *Queries) GetUser(ctx context.Context, id string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Nickname,
		&i.Description,
		&i.Nonce,
		&i.Registered,
		&i.Status,
		&i.Tags,
		&i.Rating,
		&i.Account,
	)
	return i, err
}

const getUserList = `-- name: GetUserList :many
SELECT id FROM Users
`

// get all user ids
func (q *Queries) GetUserList(ctx context.Context) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getUserList)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var id string
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserProjects = `-- name: GetUserProjects :many
SELECT id FROM Projects WHERE owner = $1
`

// gat all user's project ids
func (q *Queries) GetUserProjects(ctx context.Context, owner sql.NullString) ([]int64, error) {
	rows, err := q.db.QueryContext(ctx, getUserProjects, owner)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int64
	for rows.Next() {
		var id int64
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setProjectStatus = `-- name: SetProjectStatus :exec
UPDATE Projects SET status = $1 WHERE id = $2
`

type SetProjectStatusParams struct {
	Status sql.NullInt16 `db:"status" json:"status"`
	ID     int64         `db:"id" json:"id"`
}

func (q *Queries) SetProjectStatus(ctx context.Context, arg SetProjectStatusParams) error {
	_, err := q.db.ExecContext(ctx, setProjectStatus, arg.Status, arg.ID)
	return err
}

const updateBid = `-- name: UpdateBid :exec
UPDATE Bids SET price = $1, deadline = $2, message = $3 WHERE id = $4
`

type UpdateBidParams struct {
	Price    sql.NullInt64  `db:"price" json:"price"`
	Deadline sql.NullInt64  `db:"deadline" json:"deadline"`
	Message  sql.NullString `db:"message" json:"message"`
	ID       int64          `db:"id" json:"id"`
}

func (q *Queries) UpdateBid(ctx context.Context, arg UpdateBidParams) error {
	_, err := q.db.ExecContext(ctx, updateBid,
		arg.Price,
		arg.Deadline,
		arg.Message,
		arg.ID,
	)
	return err
}

const updateProject = `-- name: UpdateProject :exec
UPDATE Projects SET title = $1, description = $2, tags = $3, deadline = $4,
                    price = $5 WHERE id = $6
`

type UpdateProjectParams struct {
	Title       sql.NullString `db:"title" json:"title"`
	Description sql.NullString `db:"description" json:"description"`
	Tags        sql.NullString `db:"tags" json:"tags"`
	Deadline    sql.NullInt64  `db:"deadline" json:"deadline"`
	Price       sql.NullInt64  `db:"price" json:"price"`
	ID          int64          `db:"id" json:"id"`
}

func (q *Queries) UpdateProject(ctx context.Context, arg UpdateProjectParams) error {
	_, err := q.db.ExecContext(ctx, updateProject,
		arg.Title,
		arg.Description,
		arg.Tags,
		arg.Deadline,
		arg.Price,
		arg.ID,
	)
	return err
}

const updateUserNonce = `-- name: UpdateUserNonce :exec
UPDATE Users SET nonce = $1 WHERE id=$2
`

type UpdateUserNonceParams struct {
	Nonce sql.NullInt64 `db:"nonce" json:"nonce"`
	ID    string        `db:"id" json:"id"`
}

// updates user's nonce
func (q *Queries) UpdateUserNonce(ctx context.Context, arg UpdateUserNonceParams) error {
	_, err := q.db.ExecContext(ctx, updateUserNonce, arg.Nonce, arg.ID)
	return err
}
